#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Coturn
# Configures Coturn based on user settings
# ==============================================================================

readonly CONFIG_FILE="/etc/coturn/turnserver.conf"

bashio::log.info "Configuring Coturn TURN/STUN server..."

# Create config directory
mkdir -p /etc/coturn

# Read configuration values
LISTENING_PORT=$(bashio::config 'listening_port')
TLS_LISTENING_PORT=$(bashio::config 'tls_listening_port')
MIN_PORT=$(bashio::config 'min_port')
MAX_PORT=$(bashio::config 'max_port')
REALM=$(bashio::config 'realm')
USE_AUTH_SECRET=$(bashio::config 'use_auth_secret')
STATIC_AUTH_SECRET=$(bashio::config 'static_auth_secret')
USERNAME=$(bashio::config 'username')
PASSWORD=$(bashio::config 'password')
CERT_FILE=$(bashio::config 'cert_file')
PKEY_FILE=$(bashio::config 'pkey_file')
LOG_LEVEL=$(bashio::config 'log_level')
VERBOSE=$(bashio::config 'verbose')
FINGERPRINT=$(bashio::config 'fingerprint')
USE_STUN_SERVER=$(bashio::config 'use_stun_server')
USE_TURN_SERVER=$(bashio::config 'use_turn_server')
EXTERNAL_IP=$(bashio::config 'external_ip')

# Start building configuration file
bashio::log.info "Generating Coturn configuration file..."

cat > "${CONFIG_FILE}" << EOF
# Coturn STUN/TURN Server Configuration
# Generated by Home Assistant Add-on

# Listener ports
listening-port=${LISTENING_PORT}
EOF

# Add TLS port if certificates are configured
if bashio::var.has_value "${CERT_FILE}" && bashio::var.has_value "${PKEY_FILE}"; then
    cat >> "${CONFIG_FILE}" << EOF
tls-listening-port=${TLS_LISTENING_PORT}
cert=/ssl/${CERT_FILE}
pkey=/ssl/${PKEY_FILE}
EOF
fi

# Port range for media relay
cat >> "${CONFIG_FILE}" << EOF

# Media relay port range
min-port=${MIN_PORT}
max-port=${MAX_PORT}

# Realm configuration
realm=${REALM}
server-name=${REALM}
EOF

# Authentication configuration
if bashio::var.true "${USE_AUTH_SECRET}"; then
    if bashio::var.has_value "${STATIC_AUTH_SECRET}"; then
        cat >> "${CONFIG_FILE}" << EOF

# Static auth secret configuration
use-auth-secret
static-auth-secret=${STATIC_AUTH_SECRET}
EOF
    fi
else
    if bashio::var.has_value "${USERNAME}" && bashio::var.has_value "${PASSWORD}"; then
        cat >> "${CONFIG_FILE}" << EOF

# User credentials
user=${USERNAME}:${PASSWORD}
EOF
    fi
fi

# External IP configuration
if bashio::var.has_value "${EXTERNAL_IP}"; then
    cat >> "${CONFIG_FILE}" << EOF

# External IP address
external-ip=${EXTERNAL_IP}
EOF
fi

# Protocol configuration
cat >> "${CONFIG_FILE}" << EOF

# Protocol configuration
EOF

if bashio::var.false "${USE_STUN_SERVER}"; then
    cat >> "${CONFIG_FILE}" << EOF
no-stun
EOF
fi

if bashio::var.false "${USE_TURN_SERVER}"; then
    cat >> "${CONFIG_FILE}" << EOF
no-turn
EOF
fi

# Logging configuration
cat >> "${CONFIG_FILE}" << EOF

# Logging configuration
verbose-level=${LOG_LEVEL}
log-file=/var/log/coturn/turnserver.log
EOF

if bashio::var.true "${VERBOSE}"; then
    cat >> "${CONFIG_FILE}" << EOF
verbose
EOF
fi

# Security and performance settings
cat >> "${CONFIG_FILE}" << EOF

# Security settings
EOF

if bashio::var.true "${FINGERPRINT}"; then
    cat >> "${CONFIG_FILE}" << EOF
fingerprint
EOF
fi

cat >> "${CONFIG_FILE}" << EOF

# Performance settings
no-multicast-peers
no-cli
no-tlsv1
no-tlsv1_1

# Process settings
pidfile=/var/run/coturn/turnserver.pid
proc-user=coturn
proc-group=coturn
EOF

# Handle peer IP restrictions
readarray -t DENY_PEER_IPS < <(bashio::config 'deny_peer_ip')
for ip in "${DENY_PEER_IPS[@]}"; do
    if bashio::var.has_value "${ip}"; then
        cat >> "${CONFIG_FILE}" << EOF
denied-peer-ip=${ip}
EOF
    fi
done

readarray -t ALLOWED_PEER_IPS < <(bashio::config 'allowed_peer_ip')
for ip in "${ALLOWED_PEER_IPS[@]}"; do
    if bashio::var.has_value "${ip}"; then
        cat >> "${CONFIG_FILE}" << EOF
allowed-peer-ip=${ip}
EOF
    fi
done

# Create necessary directories and set permissions
mkdir -p /var/run/coturn
mkdir -p /var/log/coturn
chown -R coturn:coturn /var/run/coturn
chown -R coturn:coturn /var/log/coturn
chown -R coturn:coturn /etc/coturn

bashio::log.info "Coturn configuration completed!"

# Log configuration for debugging (without sensitive information)
if bashio::var.true "${VERBOSE}"; then
    bashio::log.debug "Configuration file contents (sensitive data hidden):"
    sed 's/static-auth-secret=.*/static-auth-secret=***HIDDEN***/g; s/user=.*:.*/user=***HIDDEN***:***HIDDEN***/g' "${CONFIG_FILE}" | \
    while IFS= read -r line; do
        bashio::log.debug "${line}"
    done
fi
